trigger:
- master
- releases/*
- node6hotfixes/*

resources:
  repositories:
  - repository: AzureDevOps
    type: git
    endpoint: AzureDevOps
    name: AzureDevOps/AzureDevOps

jobs:

# All tasks on Windows
#- job: build_all_windows
#  displayName: Build all tasks (Windows)
#  condition: and(succeeded(), not(variables.task), eq(variables.os, 'Windows_NT'))
#  pool:
#    vmImage: vs2017-win2016
#  timeoutInMinutes: 120
#  steps:
#  - template: ci/build-all-steps.yml
#    parameters:
#      os: Windows_NT

# Publish on Windows
#- job: publish_windows
#  displayName: Publish
#  dependsOn:
#  - build_all_windows
#  condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), eq(variables.os, 'Windows_NT'))
#  pool:
#    vmImage: vs2017-win2016
#  steps:
# - template: ci/publish-steps.yml

# Courtesy push on Windows
- job: courtesy_push_windows
  displayName: Courtesy Push
#  dependsOn:
#  - publish_windows
  condition: and(succeeded(), in(variables['build.reason'], 'Schedule', 'Manual'), eq(variables['COURTESY_PUSH'], 'true'))
  pool:
    vmImage: vs2017-win2016
  steps:
  - powershell: |
      $week = (Invoke-WebRequest https://whatsprintis.it -Headers @{"Accept"= "application/json"} | ConvertFrom-Json).week
      Write-Host "##vso[task.setvariable variable=week]$week"
    displayName: "Determine if its the last week of the sprint"
  - checkout: AzureDevOps
    fetchDepth: 1
    persistCredentials: true
    condition: and(succeeded(), or(eq(variables['WEEK'], '3'), eq(variables['FORCE_COURTESY_PUSH'], 'true')))
  - checkout: self
    condition: and(succeeded(), or(eq(variables['WEEK'], '3'), eq(variables['FORCE_COURTESY_PUSH'], 'true')))
  - template: ci/courtesy-push.yml

# Used to notify about fails while courtesy push PR creation
- job: notify_courtesy_push_fail
  displayName: Notify courtesy push fail
  dependsOn:
  - courtesy_push_windows
  condition: |
    and
    (
      in(dependencies.courtesy_push_windows.result, 'Failed', 'Skipped', 'Success'),
      eq(variables['COURTESY_PUSH'], 'true'),
      in(variables['build.reason'], 'Schedule', 'Manual'),
      eq(variables['COURTESY_PUSH_NOTIFICATION'], 'true')
    )
  pool:
    vmImage: vs2017-win2016
  steps:
  - powershell: |
      # Notify MS Teams channel about failed courtesy push PR creation
      $pipelineLink = "$env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI$env:SYSTEM_TEAMPROJECT/_build/results?buildId=$env:BUILD_BUILDID&_a=summary"
      $titleText = "Courtesy push build failed - ID $($env:BUILD_BUILDID)"
      $messageText = "Failed to create Courtesy Bump of Tasks PR. Please review the results of failed build [ID $($env:BUILD_BUILDID)]($($pipelineLink)). Related article in [Wiki](https://mseng.visualstudio.com/AzureDevOps/_wiki/wikis/AzureDevOps.wiki/25317/Release-of-pipeline-tasks)."
      $body = [PSCustomObject]@{
        title = $titleText
        text = $messageText
        themeColor = "#FF0000"
      } | ConvertTo-Json
      Invoke-RestMethod -Uri $(MSTeamsUri) -Method Post -Body $body -ContentType 'application/json'
    displayName: 'Send notification to the MS Teams channel'

# All tasks on Linux
#- job: build_all_linux
#  displayName: Build all tasks (Linux)
#  condition: and(succeeded(), not(variables.task), eq(variables.os, 'Linux'))
#  pool:
#    vmImage: ubuntu-18.04
#  steps:
#  - template: ci/build-all-steps.yml
#    parameters:
#      os: Linux

# All tasks on macOS
#- job: build_all_darwin
#  displayName: Build all tasks (macOS)
#  condition: and(succeeded(), not(variables.task), eq(variables.os, 'Darwin'))
#  pool:
#    vmImage: macos-10.15
#  steps:
#  - template: ci/build-all-steps.yml
#    parameters:
#      os: Darwin

# Single task
#- job: buildSingle
#  displayName: Build single task
#  condition: and(succeeded(), variables.task)
#  steps:
#  - template: ci/build-single-steps.yml

#- job: buildSharedNpm_win
#  displayName: Build shared npm packages (Win)
#  condition: and(succeeded(), not(variables.task), eq(variables.os, 'Windows_NT'))
#  pool:
#    vmImage: vs2017-win2016
#  steps:
#  - template: ci/build-common-npm.yml

#- job: buildSharedNpm_linux
#  displayName: Build shared npm packages (Linux)
#  condition: and(succeeded(), not(variables.task), eq(variables.os, 'Linux'))
#  pool:
#    vmImage: ubuntu-18.04
#  steps:
#  - template: ci/build-common-npm.yml

#- job: buildSharedNpm_darwin
#  displayName: Build shared npm packages (macOS)
#  condition: and(succeeded(), not(variables.task), eq(variables.os, 'Darwin'))
#  pool:
#    vmImage: macos-10.15
#  steps:
#  - template: ci/build-common-npm.yml
